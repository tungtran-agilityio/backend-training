version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: chat-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - chat-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: chat-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - chat-network

  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: chat-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - chat-network

  mongodb:
    image: mongo:7
    hostname: mongodb
    container_name: chat-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: chatuser
      MONGO_INITDB_ROOT_PASSWORD: chatpass
      MONGO_INITDB_DATABASE: chatdb
    volumes:
      - mongodb_data:/data/db
    networks:
      - chat-network

  # Chat service instances
  chat-service-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chat-service-1
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - SERVICE_ID=chat-service-1
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://chatuser:chatpass@mongodb:27017/chatdb?authSource=admin
    depends_on:
      - kafka
      - redis
      - mongodb
    networks:
      - chat-network

  chat-service-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chat-service-2
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - SERVICE_ID=chat-service-2
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://chatuser:chatpass@mongodb:27017/chatdb?authSource=admin
    depends_on:
      - kafka
      - redis
      - mongodb
    networks:
      - chat-network

  # Load balancer (nginx)
  nginx:
    image: nginx:alpine
    container_name: chat-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - chat-service-1
      - chat-service-2
    networks:
      - chat-network

volumes:
  redis_data:
  mongodb_data:

networks:
  chat-network:
    driver: bridge 